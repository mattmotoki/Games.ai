library(data.table)
library(png)
library(grid)
img <- readPNG("petri1.png")
dim(img)
library(png)
library(grid)
img <- readPNG("petri1.png")
grid.raster(img)
temp <- img[1:500, , ]
grid.raster(temp)
plot.new()
dim(temp)[1]
temp <- img[100:dim(img)[1], , ]
plot.new()
grid.raster(temp)
dim(img)[1]
img <- readPNG("petri1.png")
temp <- img[1:dim(img)[1], , ]
plot.new()
grid.raster(temp)
img <- readPNG("petri1.png")
temp <- img[1:dim(img)[1], , ]
plot.new()
grid.raster(temp)
img <- readPNG("petri1.png")
grid.raster(img)
library(png)
library(grid)
img <- readPNG("petri1.png")
grid.raster(img)
dev.off()
par(mar=c(0,0,0,0), bg="NA")
grid.raster(img)
temp <- img[100:dim(img)[1], , ]
grid.raster(temp)
temp <- img[90:dim(img)[1], , ]
grid.raster(temp)
graphics.off()
temp <- img[110:dim(img)[1], , ]
grid.raster(temp)
graphics.off()
temp <- img[120:dim(img)[1], , ]
grid.raster(temp)
temp <- img[120:dim(img)[1], 100:dim(img)[1], ]
grid.raster(temp)
graphics.off()
temp <- img[120:dim(img)[1], 500:dim(img)[1], ]
grid.raster(temp)
graphics.off()
temp <- img[120:dim(img)[1], 500:dim(img)[2], ]
grid.raster(temp)
par(mar=c(0,0,0,0), bg="red")
img <- readPNG("petri1.png")
graphics.off()
temp <- img[120:dim(img)[1], 500:dim(img)[2], ]
grid.raster(temp)
plot.new()
temp <- img[120:dim(img)[1], 500:dim(img)[2], ]
grid.raster(temp)
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-10), ]
grid.raster(temp)
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-50), ]
grid.raster(temp)
par(mar=c(0,0,0,0), bg="NA")
img <- readPNG("petri1.png")
graphics.off()
plot.new()
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-100), ]
grid.raster(temp)
graphics.off()
plot.new()
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-75), ]
grid.raster(temp)
graphics.off()
plot.new()
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-50), ]
grid.raster(temp)
graphics.off()
plot.new()
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-10), ]
grid.raster(temp)
graphics.off()
plot.new()
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-0), ]
grid.raster(temp)
graphics.off()
plot.new()
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-2), ]
grid.raster(temp)
par(mar=c(0,0,0,0), bg="black")
img <- readPNG("petri1.png")
graphics.off()
plot.new()
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-2), ]
grid.raster(temp)
plot(1, type="n")
temp <- img[120:dim(img)[1], 500:(dim(img)[2]-2), ]
grid.raster(temp)
chop_top <- function(img) {
img[120:dim(img)[1], 500:(dim(img)[2]-2), ]
}
chop_img <- function(img) {
img[120:dim(img)[1], 500:(dim(img)[2]-2), ]
}
img <- readPNG("petri1.png")
grid.raster(chop_img(img))
shiny::runApp('~/GitHub/Games.ai/Cell Division')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Dropbox/HIVET/Salary Compensation/R Shiny/Market Analysis Tool')
runApp('C:/Dropbox/HIVET/Salary Compensation/R Shiny/Market Analysis Tool')
runApp()
runApp('C:/Dropbox/HIVET/Salary Compensation/R Shiny/Market Analysis Tool')
?actionLink
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
htmlOutput(actionLink())
htmlOutput(actionLink
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionLink
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Chunk 1
blank_plot <- function() {
plot(1, type="n", asp=1,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(-0.1, 1.1), ylim = c(-0.1, 1.1)
)
abline(h=c(0, 1), v=c(0, 1))
}
# Chunk 2
square_cell <- function(r, n_pnts) {
R <- rep(r, n_pnts)
theta <- seq(0, 2*pi, length.out = 4*n_pnts)
x <- r*cos(theta) + c(1-R, R, R, 1-R)
y <- r*sin(theta) + c(1-R, 1-R, R, R)
cbind(x, y)
}
# create outline for a single cell with 5 points per corner
sq_outline <- square_cell(0.1, 5)
x <- sq_outline[, 1]
y <- sq_outline[, 2]
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
points(x, y, pch =20)
# Chunk 3
com_calc <- function(x, y) {
# plot and save shape
png('temp.png', width = 1000, height = 1000)
par(mar=c(0,0,0,0), bg="NA")
plot(1, type="n", asp=1, axes = FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(0, 1), ylim = c(0, 1)
)
polygon(x, y, col=rgb(0,0,0), border=NA)
dev.off()
# load in shape
img <- 1*(readPNG("temp.png")[, , 4]>0.5)
img <- img/sum(img)
# calculate center of mass
com_x <- sum(img %*% seq(0, 1, length=dim(img)[1]))
com_y <- 1-sum(t(img) %*% seq(0, 1, length=dim(img)[1]))
c(com_x, com_y)
}
# Chunk 4
library(png)
# plot a single cell with shadow and dimple
plot_cell <- function(x, y, color) {
# start with all black cell
polygon(x, y, col="black", border=NA)
# get center of mass
com <- com_calc(x, y)
# add shadow
n_layers <- 100
shink <- seq(1, 0,length=n_layers)
alpha <- seq(0.1, 1, length=n_layers)
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
# add dimple
n_layers <- 25
shink <- seq(0.25, 0.85, length=n_layers)^2
alpha <- seq(0.01, 0.05, length=n_layers)
color <- 0.5*color
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
}
blank_plot()
plot_cell(x, y, cellgreen)
library(fields)
library(data.table)
img <- readPNG("images/cell_d1.png")
img <- readPNG("www/images/cell_d1.png")
img <- readPNG("cell_d1.png")
