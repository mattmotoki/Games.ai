source('~/GitHub/Games.ai/Cell Division/www/Rmarkdown/cells/diagonal_cell_count.R')
library(png)
source("cell_plot_utils.R")
source('~/GitHub/Games.ai/Cell Division/www/Rmarkdown/cells/vertical_cell_count.R')
plot_blank()
blank_plot()
plot_cell(quad_x, quad_y, col=color)
plot_cell(quad_x, quad_y, cellgreen)
plot_cell(1-quad_x, 1-quad_y, cellgreen)
plot_cell(sm_tri_x, sm_tri_y+0.5, cellgreen)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, cellgreen)
dev.off()
# small triangular cell
sm_tri_outline <- triangular_cell(0.3, 0.1, n_pnts)
sm_tri_x <- 0.5*(sm_tri_outline[, 1]+0.5)
sm_tri_y <- 0.5*(sm_tri_outline[, 2]+0.5)
# quadrilateral cell
quad_outline <- quad_cell(0.15, 0.05, n_pnts)
quad_x <- quad_outline[, 1]+0.5
quad_y <- quad_outline[, 2]+0.5
plot_cell(quad_x, quad_y, cellgreen)
plot_cell(1-quad_x, 1-quad_y, cellgreen)
plot_cell(sm_tri_x, sm_tri_y+0.5, cellgreen)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, cellgreen)
blank_plot()
plot_cell(quad_x, quad_y, cellgreen)
plot_cell(1-quad_x, 1-quad_y, cellgreen)
plot_cell(sm_tri_x, sm_tri_y+0.5, cellgreen)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, cellgreen)
# small triangular cell
sm_tri_outline <- triangular_cell(0.3, 0.2, n_pnts)
sm_tri_x <- 0.5*(sm_tri_outline[, 1]+0.5)
sm_tri_y <- 0.5*(sm_tri_outline[, 2]+0.5)
# quadrilateral cell
quad_outline <- quad_cell(0.2, 0.1, n_pnts)
quad_x <- 0.5*(quad_outline[, 1]+0.5)
quad_y <- 0.5*(quad_outline[, 2]+0.5)
blank_plot()
plot_cell(quad_x, quad_y, cellgreen)
plot_cell(1-quad_x, 1-quad_y, cellgreen)
plot_cell(sm_tri_x, sm_tri_y+0.5, cellgreen)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, cellgreen)
# small triangular cell
sm_tri_outline <- triangular_cell(0.3, 0.2, n_pnts)
sm_tri_x <- sm_tri_outline[, 1]+0.5
sm_tri_y <- sm_tri_outline[, 2]+0.5
# quadrilateral cell
quad_outline <- quad_cell(0.2, 0.1, n_pnts)
quad_x <- quad_outline[, 1]+0.5
quad_y <- quad_outline[, 2]+0.5
blank_plot()
plot_cell(quad_x, quad_y, cellgreen)
plot_cell(1-quad_x, 1-quad_y, cellgreen)
plot_cell(sm_tri_x, sm_tri_y+0.5, cellgreen)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, cellgreen)
# small triangular cell
sm_tri_outline <- triangular_cell(0.3, 0.2, n_pnts)
sm_tri_x <- 0.5*(sm_tri_outline[, 1]+0.5)
sm_tri_y <- 0.5*(sm_tri_outline[, 2]+0.5)
blank_plot()
plot_cell(quad_x, quad_y, cellgreen)
plot_cell(1-quad_x, 1-quad_y, cellgreen)
plot_cell(sm_tri_x, sm_tri_y+0.5, cellgreen)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, cellgreen)
# [\|]
png("cell_q4a.png")
blank_plot()
plot_cell(quad_x, quad_y, cellgreen)
plot_cell(1-quad_x, 1-quad_y, cellgreen)
plot_cell(sm_tri_x, sm_tri_y+0.5, cellgreen)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, cellgreen)
dev.off()
# [|/]
png("cell_q4b.png")
blank_plot()
plot_cell(quad_x, 1-quad_y, cellgreen)
plot_cell(1-quad_x, quad_y, cellgreen)
plot_cell(sm_tri_x, 0.5-sm_tri_y, cellgreen)
plot_cell(1-sm_tri_x, sm_tri_y+0.5, cellgreen)
dev.off()
#------------------
# plot cells
graphics.off()
# [\|]
png("cell_q4a.png")
blank_plot()
plot_cell(quad_x, quad_y, cellgreen)
plot_cell(1-quad_x, 1-quad_y, cellgreen)
plot_cell(sm_tri_x, sm_tri_y+0.5, cellgreen)
plot_cell(1-sm_tri_x, 0.5-sm_tri_y, cellgreen)
dev.off()
# [|/]
png("cell_q4b.png")
blank_plot()
plot_cell(quad_x, 1-quad_y, cellgreen)
plot_cell(1-quad_x, quad_y, cellgreen)
plot_cell(sm_tri_x, 0.5-sm_tri_y, cellgreen)
plot_cell(1-sm_tri_x, sm_tri_y+0.5, cellgreen)
dev.off()
source('~/GitHub/Games.ai/Cell Division/www/images/cell_logo.R')
source('~/GitHub/Games.ai/Cell Division/www/images/cell_logo.R')
source('~/GitHub/Games.ai/Cell Division/www/images/cell_logo.R')
source('~/GitHub/Games.ai/Cell Division/www/images/cell_plot_utils.R')
source('~/GitHub/Games.ai/Cell Division/www/images/cell_logo.R')
source('~/GitHub/Games.ai/Cell Division/www/images/cell_logo.R')
source('~/GitHub/Games.ai/Cell Division/www/images/cell_logo.R')
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(0, 1), ylim = c(0, 1)
)
}
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(0, 1), ylim = c(0, 1)
)
}
triangular_cell <- function(r, r2, n_pnts) {
R <- rep(r, n_pnts)
R2 <- rep(r2, n_pnts)
theta <- c(seq(0, pi/2, length.out = n_pnts),
seq(pi/2, 5*pi/4, length.out = n_pnts),
seq(5*pi/4, 2*pi, length.out = n_pnts))
x <- c(R, R2, R2)*cos(theta) + c(1-R, R2*(1+sqrt(2)),  1-R2) - 0.5
y <- c(R, R2, R2)*sin(theta) + c(1-R, 1-R2,  R2*(1+sqrt(2))) - 0.5
cbind(x, y)
}
# create outline for a single cell with 5 points per corner
outline <- triangular_cell(0.1, 1000)
x <- outline[, 1]
y <- outline[, 2]
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
abline(h=c(0, 1), v=c(0, 1))
points(x, y, pch =20)
outline <- triangular_cell(0.3, 0.2, 5)
x <- outline[, 1]+0.5
y <- outline[, 2]+0.5
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
abline(h=c(0, 1), v=c(0, 1))
# create outline for a single cell with 10 points per corner
outline <- triangular_cell(0.3, 0.2, 510)
x <- outline[, 1]+0.5
y <- outline[, 2]+0.5
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
abline(h=c(0, 1), v=c(0, 1))
points(x, y, pch =20)
# create outline for a single cell with 10 points per corner
outline <- triangular_cell(0.3, 0.2, 10)
x <- outline[, 1]+0.5
y <- outline[, 2]+0.5
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
abline(h=c(0, 1), v=c(0, 1))
points(x, y, pch =20)
polygon(x, 0.5-y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
polygon(0.5-x, 0.5-y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
polygon(0.5-2x, 0.25-y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
polygon(0.25-x, 0.25-y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
polygon(-x, -y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
polygon(1-x, 1-y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(-1, 2), ylim = c(-1, 2)
)
}
triangular_cell <- function(r, r2, n_pnts) {
R <- rep(r, n_pnts)
R2 <- rep(r2, n_pnts)
theta <- c(seq(0, pi/2, length.out = n_pnts),
seq(pi/2, 5*pi/4, length.out = n_pnts),
seq(5*pi/4, 2*pi, length.out = n_pnts))
x <- c(R, R2, R2)*cos(theta) + c(1-R, R2*(1+sqrt(2)),  1-R2) - 0.5
y <- c(R, R2, R2)*sin(theta) + c(1-R, 1-R2,  R2*(1+sqrt(2))) - 0.5
cbind(x, y)
}
# create outline for a single cell with 10 points per corner
outline <- triangular_cell(0.3, 0.2, 10)
x <- outline[, 1]+0.5
y <- outline[, 2]+0.5
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
polygon(1-x, 1-y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
abline(h=c(0, 1), v=c(0, 1))
points(x, y, pch =20)
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(-0.1, 1.1), ylim = c(-0.1, 1.1)
)
}
triangular_cell <- function(r, r2, n_pnts) {
R <- rep(r, n_pnts)
R2 <- rep(r2, n_pnts)
theta <- c(seq(0, pi/2, length.out = n_pnts),
seq(pi/2, 5*pi/4, length.out = n_pnts),
seq(5*pi/4, 2*pi, length.out = n_pnts))
x <- c(R, R2, R2)*cos(theta) + c(1-R, R2*(1+sqrt(2)),  1-R2) - 0.5
y <- c(R, R2, R2)*sin(theta) + c(1-R, 1-R2,  R2*(1+sqrt(2))) - 0.5
cbind(x, y)
}
# create outline for a single cell with 10 points per corner
outline <- triangular_cell(0.3, 0.2, 10)
x <- outline[, 1]+0.5
y <- outline[, 2]+0.5
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
polygon(1-x, 1-y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
abline(h=c(0, 1), v=c(0, 1))
points(x, y, pch =20)
triangular_cell <- function(r, r2, n_pnts) {
R <- rep(r, n_pnts)
R2 <- rep(r2, n_pnts)
theta <- c(seq(0, pi/2, length.out = n_pnts),
seq(pi/2, 5*pi/4, length.out = n_pnts),
seq(5*pi/4, 2*pi, length.out = n_pnts))
x <- c(R, R2, R2)*cos(theta) + c(1-R, R2*(1+sqrt(2)),  1-R2) - 0.5
y <- c(R, R2, R2)*sin(theta) + c(1-R, 1-R2,  R2*(1+sqrt(2))) - 0.5
cbind(x, y)
}
# create outline for a single cell with 10 points per corner
outline <- triangular_cell(0.3, 0.2, 10)
x <- outline[, 1]+0.5
y <- outline[, 2]+0.5
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
abline(h=c(0, 1), v=c(0, 1))
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
polygon(1-x, 1-y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
points(1-x, 1-y, pch =20)
points(x, y, pch =20)
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
abline(h=c(0, 1), v=c(0, 1))
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
points(x, y, pch =20)
cellgreen
rgb(cellgreen)
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(-0.1, 1.1), ylim = c(-0.1, 1.1)
)
}
# Chunk 2
triangular_cell <- function(r, r2, n_pnts) {
R <- rep(r, n_pnts)
R2 <- rep(r2, n_pnts)
theta <- c(seq(0, pi/2, length.out = n_pnts),
seq(pi/2, 5*pi/4, length.out = n_pnts),
seq(5*pi/4, 2*pi, length.out = n_pnts))
x <- c(R, R2, R2)*cos(theta) + c(1-R, R2*(1+sqrt(2)),  1-R2) - 0.5
y <- c(R, R2, R2)*sin(theta) + c(1-R, 1-R2,  R2*(1+sqrt(2))) - 0.5
cbind(x, y)
}
# side trianglular cell
side_tri_outline <- side_triangular_cell(0.1, 0.3, n_pnts)
side_tri_x <- side_tri_outline[, 1]+0.5
side_tri_y <- side_tri_outline[, 2]+0.5
# small trianglular cell
sm_tri_outline <- triangular_cell(0.3, 0.2, n_pnts)
sm_tri_x <- 0.5*(sm_tri_outline[, 1]+0.5)
sm_tri_y <- 0.5*(sm_tri_outline[, 2]+0.5)
# color
color_rgb <- rgb(cellgreen[1], cellgreen[2], cellgreen[3])
# right
polygon(sm_tri_x+0.5, 1-sm_tri_y, col=color_rgb)
polygon(sm_tri_x+0.5, sm_tri_y, col=color_rgb)
# left
polygon(0.5-sm_tri_x, 1-sm_tri_y, col=color_rgb)
polygon(0.5-sm_tri_x, sm_tri_y, col=color_rgb)
polygon(side_tri_y, 1-side_tri_x, col=color_rgb) # bot
polygon(side_tri_y, side_tri_x, col=color_rgb) # top
blank_plot()
color_rgb <- rgb(cellgreen[1], cellgreen[2], cellgreen[3])
# right
polygon(sm_tri_x+0.5, 1-sm_tri_y, col=color_rgb)
polygon(sm_tri_x+0.5, sm_tri_y, col=color_rgb)
# left
polygon(0.5-sm_tri_x, 1-sm_tri_y, col=color_rgb)
polygon(0.5-sm_tri_x, sm_tri_y, col=color_rgb)
polygon(side_tri_y, 1-side_tri_x, col=color_rgb) # bot
polygon(side_tri_y, side_tri_x, col=color_rgb) # top
points(sm_tri_x+0.5, 1-sm_tri_y)
# side trianglular cell
side_tri_outline <- side_triangular_cell(0.1, 0.3, 10)
side_tri_x <- side_tri_outline[, 1]+0.5
side_tri_y <- side_tri_outline[, 2]+0.5
# small trianglular cell
sm_tri_outline <- triangular_cell(0.3, 0.2, 10)
sm_tri_x <- 0.5*(sm_tri_outline[, 1]+0.5)
sm_tri_y <- 0.5*(sm_tri_outline[, 2]+0.5)
# color
blank_plot()
color_rgb <- rgb(cellgreen[1], cellgreen[2], cellgreen[3])
polygon(sm_tri_x+0.5, 1-sm_tri_y, col=color_rgb)
points(sm_tri_x+0.5, 1-sm_tri_y)
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(-0.1, 1.1), ylim = c(-0.1, 1.1)
)
}
# Chunk 2
triangular_cell <- function(r, r2, n_pnts) {
R <- rep(r, n_pnts)
R2 <- rep(r2, n_pnts)
theta <- c(seq(0, pi/2, length.out = n_pnts),
seq(pi/2, 5*pi/4, length.out = n_pnts),
seq(5*pi/4, 2*pi, length.out = n_pnts))
x <- c(R, R2, R2)*cos(theta) + c(1-R, R2*(1+sqrt(2)),  1-R2) - 0.5
y <- c(R, R2, R2)*sin(theta) + c(1-R, 1-R2,  R2*(1+sqrt(2))) - 0.5
cbind(x, y)
}
# side trianglular cell
side_tri_outline <- side_triangular_cell(0.1, 0.3, 10)
side_tri_x <- side_tri_outline[, 1]+0.5
side_tri_y <- side_tri_outline[, 2]+0.5
# small trianglular cell
sm_tri_outline <- triangular_cell(0.3, 0.2, 10)
sm_tri_x <- 0.5*(sm_tri_outline[, 1]+0.5)
sm_tri_y <- 0.5*(sm_tri_outline[, 2]+0.5)
# initialze plot
blank_plot()
cellgreen <- c(34/255,250/255,34/255)
poly_and_points <- function(x, y) {
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]))
points(x, y)
}
# right
poly_and_points(sm_tri_x+0.5, 1-sm_tri_y)
poly_and_points(sm_tri_x+0.5, sm_tri_y)
# left
poly_and_points(0.5-sm_tri_x, 1-sm_tri_y)
poly_and_points(0.5-sm_tri_x, sm_tri_y)
# bottom and top (respectively)
poly_and_points(side_tri_y, 1-side_tri_x)
poly_and_points(side_tri_y, side_tri_x)
library(png)
# plot a single cell with shadow and dimple
plot_cell <- function(x, y, color) {
# start with all black cell
polygon(x, y, col="black", border=NA)
# get center of mass
com <- com_calc(x, y)
# add shadow
n_layers <- 100
shink <- seq(1, 0,length=n_layers)
alpha <- seq(0.1, 1, length=n_layers)
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
# add dimple
n_layers <- 25
shink <- seq(0.25, 0.85, length=n_layers)^2
alpha <- seq(0.01, 0.05, length=n_layers)
color <- 0.5*color
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
}
# initialze plot
blank_plot()
# right
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color=cellgreen)
plot_cell(sm_tri_x+0.5, sm_tri_y, color=cellgreen)
# left
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color=cellgreen)
plot_cell(0.5-sm_tri_x, sm_tri_y, color=cellgreen)
# bottom and top (respectively)
plot_cell(side_tri_y, 1-side_tri_x, color=cellgreen)
plot_cell(side_tri_y, side_tri_x, color=cellgreen)
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color=cellgreen)
plot_cell(sm_tri_x+0.5, 1-sm_tri_y, color=cellgreen)
plot_cell(0.5-sm_tri_x, 1-sm_tri_y, color=cellgreen)
plot_cell(side_tri_y, 1-side_tri_x, color=cellgreen)
source('~/GitHub/Games.ai/Cell Division/www/images/cell_logo.R')
