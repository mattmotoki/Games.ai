blank_plot()
plot_cell(x, y, cellgreen)
library(data.table)
library(aws)
smooth_cell <- function(x, y) {
png('temp.png', width = 800, height = 800)
blank_plot()
polygon(c(0,0,1,1), c(0,1,1,0),col="black") # add black background
plot_cell(x, y, cellgreen)
dev.off()
# smooth cell
img <- readPNG("temp.png")
border_inds <- which(img[, , k]==0)
for (k in 1:3) {
# smooth entire matrix
# temp <- kernsm(img[, ,k], h=10, kern="Triangle")@yhat
# temp <- kernsm(img[, ,k], h=10, kern="Epanechnicov")@yhat
temp <- kernsm(img[, , k], h=10, kern="Gaussian")@yhat
temp[temp<0] <- 0
temp[temp>1] <- 1
temp[border_inds] <- 1
img[, , k] <- temp
}
img
}
graphics.off()
img <- smooth_cell(x, y)
blank_plot()
rasterImage(img, 0, 0, 1, 1)
# abline(v=c(0, 1), h=c(0, 1))
blank_plot()
plot_cell(x, y, cellgreen)
# abline(v=c(0, 1), h=c(0, 1))
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(0, 1), ylim = c(0, 1.001)
)
}
# Chunk 2
square_cell <- function(r, n_pnts) {
R <- rep(r, n_pnts)
theta <- seq(0, 2*pi, length.out = 4*n_pnts)
x <- r*cos(theta) + c(1-R, R, R, 1-R)
y <- r*sin(theta) + c(1-R, 1-R, R, R)
cbind(x, y)
}
# create outline for a single cell with 5 points per corner
sq_outline <- square_cell(0.1, 1000)
x <- sq_outline[, 1]
y <- sq_outline[, 2]
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
points(x, y, pch =20)
# Chunk 3
com_calc <- function(x, y) {
# plot and save shape
png('temp_com.png', width = 800, height = 800)
blank_plot()
polygon(x, y, col=rgb(0,0,0), border=NA)
dev.off()
# load in shape
img <- 1*(readPNG("temp_com.png")[, , 4]>0.5)
img <- img/sum(img)
# calculate center of mass
com_x <- sum(img %*% seq(0, 1, length=dim(img)[1]))
com_y <- 1-sum(t(img) %*% seq(0, 1, length=dim(img)[1]))
c(com_x, com_y)
}
# Chunk 4
library(png)
# plot a single cell with shadow and dimple
plot_cell <- function(x, y, color) {
# start with all black cell
polygon(x, y, col="black", border=NA)
# get center of mass
com <- com_calc(x, y)
# add shadow
n_layers <- 100
shink <- seq(1, 0,length=n_layers)
alpha <- seq(0.1, 1, length=n_layers)
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
# add dimple
n_layers <- 25
shink <- seq(0.25, 0.85, length=n_layers)^2
alpha <- seq(0.01, 0.05, length=n_layers)
color <- 0.5*color
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
}
blank_plot()
plot_cell(x, y, cellgreen)
library(data.table)
library(aws)
smooth_cell <- function(x, y) {
png('temp.png', width = 800, height = 800)
blank_plot()
polygon(c(0,0,1,1), c(0,1,1,0),col="black") # add black background
plot_cell(x, y, cellgreen)
dev.off()
# smooth cell
img <- readPNG("temp.png")
border_inds <- which(img[, , k]==0)
for (k in 1:3) {
# smooth entire matrix
# temp <- kernsm(img[, ,k], h=10, kern="Triangle")@yhat
# temp <- kernsm(img[, ,k], h=10, kern="Epanechnicov")@yhat
temp <- kernsm(img[, , k], h=10, kern="Gaussian")@yhat
temp[temp<0] <- 0
temp[temp>1] <- 1
temp[border_inds] <- 1
img[, , k] <- temp
}
img
}
graphics.off()
img <- smooth_cell(x, y)
blank_plot()
rasterImage(img, 0, 0, 1, 1)
# abline(v=c(0, 1), h=c(0, 1))
blank_plot()
plot_cell(x, y, cellgreen)
# abline(v=c(0, 1), h=c(0, 1))
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(-0.001, 1), ylim = c(0, 1.001)
)
}
# Chunk 2
square_cell <- function(r, n_pnts) {
R <- rep(r, n_pnts)
theta <- seq(0, 2*pi, length.out = 4*n_pnts)
x <- r*cos(theta) + c(1-R, R, R, 1-R)
y <- r*sin(theta) + c(1-R, 1-R, R, R)
cbind(x, y)
}
# create outline for a single cell with 5 points per corner
sq_outline <- square_cell(0.1, 1000)
x <- sq_outline[, 1]
y <- sq_outline[, 2]
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
points(x, y, pch =20)
# Chunk 3
com_calc <- function(x, y) {
# plot and save shape
png('temp_com.png', width = 800, height = 800)
blank_plot()
polygon(x, y, col=rgb(0,0,0), border=NA)
dev.off()
# load in shape
img <- 1*(readPNG("temp_com.png")[, , 4]>0.5)
img <- img/sum(img)
# calculate center of mass
com_x <- sum(img %*% seq(0, 1, length=dim(img)[1]))
com_y <- 1-sum(t(img) %*% seq(0, 1, length=dim(img)[1]))
c(com_x, com_y)
}
# Chunk 4
library(png)
# plot a single cell with shadow and dimple
plot_cell <- function(x, y, color) {
# start with all black cell
polygon(x, y, col="black", border=NA)
# get center of mass
com <- com_calc(x, y)
# add shadow
n_layers <- 100
shink <- seq(1, 0,length=n_layers)
alpha <- seq(0.1, 1, length=n_layers)
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
# add dimple
n_layers <- 25
shink <- seq(0.25, 0.85, length=n_layers)^2
alpha <- seq(0.01, 0.05, length=n_layers)
color <- 0.5*color
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
}
blank_plot()
plot_cell(x, y, cellgreen)
library(data.table)
library(aws)
smooth_cell <- function(x, y) {
png('temp.png', width = 800, height = 800)
blank_plot()
polygon(c(0,0,1,1), c(0,1,1,0),col="black") # add black background
plot_cell(x, y, cellgreen)
dev.off()
# smooth cell
img <- readPNG("temp.png")
border_inds <- which(img[, , k]==0)
for (k in 1:3) {
# smooth entire matrix
# temp <- kernsm(img[, ,k], h=10, kern="Triangle")@yhat
# temp <- kernsm(img[, ,k], h=10, kern="Epanechnicov")@yhat
temp <- kernsm(img[, , k], h=10, kern="Gaussian")@yhat
temp[temp<0] <- 0
temp[temp>1] <- 1
temp[border_inds] <- 1
img[, , k] <- temp
}
img
}
graphics.off()
img <- smooth_cell(x, y)
blank_plot()
rasterImage(img, 0, 0, 1, 1)
# abline(v=c(0, 1), h=c(0, 1))
blank_plot()
plot_cell(x, y, cellgreen)
# abline(v=c(0, 1), h=c(0, 1))
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(-0.0015, 1), ylim = c(0, 1.0015)
)
}
# Chunk 2
square_cell <- function(r, n_pnts) {
R <- rep(r, n_pnts)
theta <- seq(0, 2*pi, length.out = 4*n_pnts)
x <- r*cos(theta) + c(1-R, R, R, 1-R)
y <- r*sin(theta) + c(1-R, 1-R, R, R)
cbind(x, y)
}
# create outline for a single cell with 5 points per corner
sq_outline <- square_cell(0.1, 1000)
x <- sq_outline[, 1]
y <- sq_outline[, 2]
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
points(x, y, pch =20)
# Chunk 3
com_calc <- function(x, y) {
# plot and save shape
png('temp_com.png', width = 800, height = 800)
blank_plot()
polygon(x, y, col=rgb(0,0,0), border=NA)
dev.off()
# load in shape
img <- 1*(readPNG("temp_com.png")[, , 4]>0.5)
img <- img/sum(img)
# calculate center of mass
com_x <- sum(img %*% seq(0, 1, length=dim(img)[1]))
com_y <- 1-sum(t(img) %*% seq(0, 1, length=dim(img)[1]))
c(com_x, com_y)
}
# Chunk 4
library(png)
# plot a single cell with shadow and dimple
plot_cell <- function(x, y, color) {
# start with all black cell
polygon(x, y, col="black", border=NA)
# get center of mass
com <- com_calc(x, y)
# add shadow
n_layers <- 100
shink <- seq(1, 0,length=n_layers)
alpha <- seq(0.1, 1, length=n_layers)
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
# add dimple
n_layers <- 25
shink <- seq(0.25, 0.85, length=n_layers)^2
alpha <- seq(0.01, 0.05, length=n_layers)
color <- 0.5*color
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
}
blank_plot()
plot_cell(x, y, cellgreen)
# Chunk 5
library(data.table)
library(aws)
smooth_cell <- function(x, y) {
png('temp.png', width = 800, height = 800)
blank_plot()
polygon(c(0,0,1,1), c(0,1,1,0),col="black") # add black background
plot_cell(x, y, cellgreen)
dev.off()
# smooth cell
img <- readPNG("temp.png")
border_inds <- which(img[, , k]==0)
for (k in 1:3) {
# smooth entire matrix
# temp <- kernsm(img[, ,k], h=10, kern="Triangle")@yhat
# temp <- kernsm(img[, ,k], h=10, kern="Epanechnicov")@yhat
temp <- kernsm(img[, , k], h=10, kern="Gaussian")@yhat
temp[temp<0] <- 0
temp[temp>1] <- 1
temp[border_inds] <- 1
img[, , k] <- temp
}
img
}
graphics.off()
img <- smooth_cell(x, y)
blank_plot()
rasterImage(img, 0, 0, 1, 1)
# abline(v=c(0, 1), h=c(0, 1))
blank_plot()
plot_cell(x, y, cellgreen)
# abline(v=c(0, 1), h=c(0, 1))
library(data.table)
library(aws)
smooth_cell <- function()
png('temp.png', width = 480, height = 480)
blank_plot()
plot_cell(x, y, cellgreen)
dev.off()
img <- readPNG("temp.png")
for (k in 1:3) {
# smooth entire matrix
# temp <- kernsm(img2[, ,k], h=3, kern="Triangle")@yhat
# temp <- kernsm(img2[, ,k], h=2, kern="Epanechnicov")@yhat
temp <- kernsm(img[, ,k], h=1, kern="Gaussian")@yhat
# temp <- aws(img2[, ,k], ladjust = 100)@theta[, , 1]
print(mean(abs(temp - img[, , k])))
temp[temp<0] <- 0
temp[temp>1] <- 1
img[, , k] <- temp
}
blank_plot()
rasterImage(img, 0, 0, 1, 1)
title("interpolated")
cellfile <- "../images/cell_d2.png"
blank_plot()
img <- readPNG(cellfile)
rasterImage(img, 0, 0, 1, 1)
title("original")
img2 <- readPNG(cellfile)
for (k in 1:3) {
# smooth entire matrix
# temp <- kernsm(img2[, ,k], h=3, kern="Triangle")@yhat
# temp <- kernsm(img2[, ,k], h=2, kern="Epanechnicov")@yhat
temp <- kernsm(img2[, ,k], h=1, kern="Gaussian")@yhat
# temp <- aws(img2[, ,k], ladjust = 100)@theta[, , 1]
print(mean(abs(temp - img2[, , k])))
temp[temp<0] <- 0
temp[temp>1] <- 1
img2[, , k] <- temp
}
blank_plot()
rasterImage(img2, 0, 0, 1, 1)
title("interpolated")
library(data.table)
library(aws)
smooth_cell <- function(x, y) {
png('temp.png', width = 800, height = 800)
blank_plot()
polygon(c(0,0,1,1), c(0,1,1,0),col="black") # add black background
plot_cell(x, y, cellgreen)
dev.off()
# smooth cell
img <- readPNG("temp.png")
border_inds <- which(img[, , k]==0)
for (k in 1:3) {
# smooth entire matrix
# temp <- kernsm(img[, ,k], h=10, kern="Triangle")@yhat
# temp <- kernsm(img[, ,k], h=10, kern="Epanechnicov")@yhat
temp <- kernsm(img[, , k], h=10, kern="Gaussian")@yhat
temp[temp<0] <- 0
temp[temp>1] <- 1
temp[border_inds] <- 1
img[, , k] <- temp
}
img
}
graphics.off()
img <- smooth_cell(x, y)
blank_plot()
rasterImage(img, 0, 0, 1, 1)
# abline(v=c(0, 1), h=c(0, 1))
blank_plot()
plot_cell(x, y, cellgreen)
# abline(v=c(0, 1), h=c(0, 1))
# Chunk 1
blank_plot <- function() {
par(mar=c(0,0,0,0), bg=NA)
plot(1, type="n", asp=1, axes=FALSE,
yaxs="i", xaxs="i", xlab = "", ylab = "",
xlim = c(-0.001, 1.001), ylim = c(-0.001, 1.001)
)
}
# Chunk 2
square_cell <- function(r, n_pnts) {
R <- rep(r, n_pnts)
theta <- seq(0, 2*pi, length.out = 4*n_pnts)
x <- r*cos(theta) + c(1-R, R, R, 1-R)
y <- r*sin(theta) + c(1-R, 1-R, R, R)
cbind(x, y)
}
# create outline for a single cell with 5 points per corner
sq_outline <- square_cell(0.1, 1000)
x <- sq_outline[, 1]
y <- sq_outline[, 2]
# plot green cell
cellgreen <- c(34/255,250/255,34/255)
blank_plot()
polygon(x, y, col=rgb(cellgreen[1], cellgreen[2], cellgreen[3]), lwd=2)
points(x, y, pch =20)
# Chunk 3
com_calc <- function(x, y) {
# plot and save shape
png('temp_com.png', width = 800, height = 800)
blank_plot()
polygon(x, y, col=rgb(0,0,0), border=NA)
dev.off()
# load in shape
img <- 1*(readPNG("temp_com.png")[, , 4]>0.5)
img <- img/sum(img)
# calculate center of mass
com_x <- sum(img %*% seq(0, 1, length=dim(img)[1]))
com_y <- 1-sum(t(img) %*% seq(0, 1, length=dim(img)[1]))
c(com_x, com_y)
}
# Chunk 4
library(png)
# plot a single cell with shadow and dimple
plot_cell <- function(x, y, color) {
# start with all black cell
polygon(x, y, col="black", border=NA)
# get center of mass
com <- com_calc(x, y)
# add shadow
n_layers <- 100
shink <- seq(1, 0,length=n_layers)
alpha <- seq(0.1, 1, length=n_layers)
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
# add dimple
n_layers <- 25
shink <- seq(0.25, 0.85, length=n_layers)^2
alpha <- seq(0.01, 0.05, length=n_layers)
color <- 0.5*color
for (k in 1:n_layers) {
polygon(shink[k]*(x-com[1])+com[1], shink[k]*(y-com[2])+com[2],
col=rgb(color[1], color[2], color[3], alpha[k]),
border=NA)
}
}
blank_plot()
plot_cell(x, y, cellgreen)
library(data.table)
library(aws)
smooth_cell <- function(x, y) {
png('temp.png', width = 800, height = 800)
blank_plot()
polygon(c(0,0,1,1), c(0,1,1,0),col="black") # add black background
plot_cell(x, y, cellgreen)
dev.off()
# smooth cell
img <- readPNG("temp.png")
border_inds <- which(img[, , k]==0)
for (k in 1:3) {
# smooth entire matrix
# temp <- kernsm(img[, ,k], h=10, kern="Triangle")@yhat
# temp <- kernsm(img[, ,k], h=10, kern="Epanechnicov")@yhat
temp <- kernsm(img[, , k], h=10, kern="Gaussian")@yhat
temp[temp<0] <- 0
temp[temp>1] <- 1
temp[border_inds] <- 1
img[, , k] <- temp
}
img
}
graphics.off()
img <- smooth_cell(x, y)
blank_plot()
rasterImage(img, 0, 0, 1, 1)
# abline(v=c(0, 1), h=c(0, 1))
blank_plot()
plot_cell(x, y, cellgreen)
# abline(v=c(0, 1), h=c(0, 1))
source('~/GitHub/Games.ai/Cell Division/www/images/cell_logo.R')
